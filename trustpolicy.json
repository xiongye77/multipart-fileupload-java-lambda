{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow",
      "Principal": 
        { 
          "Service": "lambda.amazonaws.com" 
        },
      "Action": "sts:AssumeRole"
    } 
  ] 
}




aws iam create-role --role-name [fileupload-lambda-role] --assume-role-policy-document file://./trustpolicy.json


aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole --role-name [fileupload-lambda-role] 

aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSLambdaExecute --role-name [fileupload-lambda-role]

change java code to your bucket name and region

mvn clean package


aws lambda create-function --function-name [fileupload] --runtime java8 --role arn:aws:iam::[account-number]:role/[fileupload-lambda-role] --handler [fileupload.FileUploadFunctionHandler::handleRequest] --zip-file fileb://./target/fileupload-0.0.1-SNAPSHOT.jar --region [us-east-1] --timeout 60 --memory-size 320


aws lambda update-function-code --function-name [fileupload] --zip-file fileb://./target/fileupload-0.0.1-SNAPSHOT.jar --region [us-east-1]  if needed 



curl -v -X POST \ "https://[gateway-api-id].execute-api.[us-east-1].amazonaws.com/test/{fileupload+}" \ -F "data=@[picture.jpg]"



Create the API Gateway Stage

The most important thing to know about setting up API Gateway is that we must configure it as a passthrough for binary data. I must credit Anton Myshenin’s JavaScript lambda-multipart-parser documentation for being the first mention of this that I found.

First, we’ll create an API in API Gateway. I’m going to do the steps for this phase in the AWS Console. As you can see below, I chose to use a Regional, REST API. Regional APIs do not have CloudFront distributions in front of them, which for our use case is a good thing.
Image for post
Image for post

After creating my API, I need to create a resource and method. Go to ‘Resources’ in your newly created API, and choose ‘Create Resource’ from the Actions menu. As shown in the image below, we want to set up this Resource as a ‘proxy resource’. As such, we need to give it a unique path. The resource path must fit the following naming convention: {name+}. I chose to name this example {fileupload+}. We also want to enable CORS. Note that you can only have one Lambda Proxy per resource; if you ever try to create a second proxy under the same resource path, you'll get an error.
Image for post
Image for post

Once you click ‘Create Resource’, you will notice that the fileupload resource and ‘ANY’ method are created. As a proxy, any/all method requests are passed to the lambda function. Now we just need to connect our ‘fileupload’ lambda to this API Gateway ANY method. To do that, select the ‘ANY’ method as shown below.
Image for post
Image for post

The ‘Integration type’ will already be set to ‘Lambda Function Proxy’. Choose your region, and start typing the name you gave the Lambda Function -e.g. fileupload. Then click save.

When prompted, give API Gateway permission to invoke your Lambda function: arn:aws:lambda:us-east-1:[account-number]:function:fileupload.

Next, we need to tell API Gateway that it should handle multipart/form-data as a binary data type. To do that, go to Settings under your API as shown below. Look under Binary Media Types, and add ‘multipart/form-data’ to the list. Then save this change.
Image for post
Image for post

Now we need to deploy this API to a Stage. Go back up to the ‘Resources’, and click ‘Deploy API’ under the Actions menu.
Image for post
Image for post

We’ll need to create our first Stage in which to deploy. On the modal, simply give yours a name. I called mine ‘test’ as show below.
Image for post
Image for post

After deploying the stage, we’ll look for our ‘Invoke Url’. This can be found by clicking our ‘test’ stage after it is created, as shown in the blue banner near the top of the screenshot below.
Image for post
Image for post
Testing

To test this, we will use a curl statement. Notice the -F option. It will automatically tell curl to add the appropriate content-type with a boundary.

curl -v -X POST \ "https://[gateway-api-id].execute-api.[us-east-1].amazonaws.com/test/fileupload" \ -F "data=@[picture.jpg]"
